[Before we start]

    - So if you are new to Java web development and don't know where to start, don't worry
    
    - Now open the /debug-java-web and analyze each part with me

            bigbox@ubuntu:~/Writeup/cyberjutsu/.../debug-java-web$ tree
            .
            ├── pom.xml
            ├── src
            │   └── main
            │       ├── java
            │       │   └── com
            │       │       └── example
            │       │           ├── GoodbyeServlet.java
            │       │           └── HelloServlet.java
            │       └── webapp
            │           ├── hello.txt
            │           ├── index.jsp
            │           └── WEB-INF
            │               └── web.xml
            └── target
                ├── classes
                │   └── com
                │       └── example
                │           ├── GoodbyeServlet.class
                │           └── HelloServlet.class
                ├── generated-sources
                │   └── annotations
                ├── generated-test-sources
                │   └── test-annotations
                └── test-classes

    [*] /pom.xml

        [+] Basically pom.xml is just a configuration file that contains information about project dependencies, settings, and packaging 
            
            (Maven uses this information to build and deploy the project)

    // [?] What is Maven, you may wonder? It is just software that helps you easier to manage dependencies, and automate the build process.

                ...
                <groupId>com.example</groupId>
                <artifactId>debug-java-web</artifactId>
                <version>1.0-SNAPSHOT</version> 

    // [?] Specifies the version number of the project
                
                <name>debug-java-web</name> 
                <packaging>war</packaging>

    // [?] Specifies the type of packaging used for the project. 
           In this case, it is set to "war", which stands for Web ARchive. This packaging is used for Java web applications.
                
                ...
                <dependency>
                    <groupId>javax.servlet</groupId>
                    <artifactId>javax.servlet-api</artifactId>
                    <version>3.1.0</version>
                    <scope>provided</scope>
                </dependency>
                ...

            => root@f66b048b7d39:/home/cbjs# ls

                apache-maven-3.6.3
                ...
                debug-java-web-1.0-SNAPSHOT.war
                ...
                apache-tomcat-8.5.35
                debug-java-web
                ...
                jdk1.8.0_131

    [*] /src/main/java/com/example

        - Before deep dive into this, you should look at the first line of the GoodbyeServlet.java

            package com.example;
            ...

        => This line at the beginning of a Java file is used to define the package to which that particular Java file belongs. 
           This package declaration is independent of the directory structure. However, Java does not enforce this relationship

        - According to CodeGPT this is how we should understand this kind of hierarchy

                src: contains the source code and resources of your project.

                main: represents the main source folder of your project.

                java: contains the Java source code files.

                com: represents the package structure of your project.

                example: represents the subpackage structure within the com package.

    [*] /webapp 
        
        - This directory contains the web application's static resources, such as HTML, CSS, and JavaScript files

        - And you can see index.jsp right? it is nothing special. just think about index.php, they are the same

    [*] /WEB-INF/web.xml

        - This file is the web application's deployment descriptor, which describes the application's servlets, filters, and other components.

                <display-name>My App</display-name>

    // [?] <display-name> element specifies the display name of the web application

                <servlet>

    // [?] Servlet is a Java class that extends the HttpServlet class. Servlets are used to extend the functionality of a web server. 
           They can be used to handle HTTP requests, generate dynamic content, and interact with databases.
    
                    <servlet-name>goodbye</servlet-name>
                    <servlet-class>com.example.GoodbyeServlet</servlet-class>
                </servlet>

                <servlet-mapping>

    // [?] The <servlet-mapping> element specifies a mapping between a servlet and a URL pattern

                    <servlet-name>goodbye</servlet-name>
                    <url-pattern>/goodbye</url-pattern>
                </servlet-mapping>
                </web-app>

            => From this code you can understand that When a user requests the URL /goodbye, the Tomcat web server will invoke the GoodbyeServlet class. 
                
               (The GoodbyeServlet class can then handle the request and generate a response)

    [*] /target

        - The /target directory is used to store the compiled files for a Java web application. When you build a Java web application, 
          
          => The Maven build process will compile the source code and generate the class files (The class files will be stored in the /target directory).

        - The /target directory is not directly accessible to the web. The web server will only serve files that are located in the /webapp directory.

    [Fact] Tomcat is a Java-based web server that can be used to host Java web applications, just like the relationship between PHP and Apache2

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

